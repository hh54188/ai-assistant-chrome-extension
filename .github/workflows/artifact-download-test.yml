name: Artifact Download Test

on:
  workflow_dispatch:
    inputs:
      run-id:
        description: 'Workflow run ID to download coverage artifacts from'
        required: true
        default: '18072644387'
        type: string
      artifact-name:
        description: 'Name of the artifact to download'
        required: true
        default: 'stores-coverage-report'
        type: string
      download-path:
        description: 'Path where to download the artifact'
        required: true
        default: './coverage/'
        type: string
  workflow_call:
    inputs:
      run-id:
        description: 'Workflow run ID to download coverage artifacts from'
        required: true
        type: string
      artifact-name:
        description: 'Name of the artifact to download'
        required: false
        default: 'stores-coverage-report'
        type: string
      download-path:
        description: 'Path where to download the artifact'
        required: false
        default: './coverage/'
        type: string
    outputs:
      artifact-downloaded:
        description: 'Whether the artifact was successfully downloaded'
        value: ${{ jobs.download-artifact.outputs.success }}
      download-path:
        description: 'Path where the artifact was downloaded'
        value: ${{ jobs.download-artifact.outputs.download-path }}

permissions:
  contents: read
  actions: read

jobs:
  download-artifact:
    runs-on: ubuntu-latest
    outputs:
      success: ${{ steps.download.outcome == 'success' }}
      download-path: ${{ steps.set-outputs.outputs.download-path }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set output values
      id: set-outputs
      run: |
        # Determine the artifact name and download path based on trigger type
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          ARTIFACT_NAME="${{ github.event.inputs.artifact-name }}"
          DOWNLOAD_PATH="${{ github.event.inputs.download-path }}"
        else
          ARTIFACT_NAME="${{ inputs.artifact-name }}"
          DOWNLOAD_PATH="${{ inputs.download-path }}"
        fi
        
        # Ensure we have the run ID
        RUN_ID="${{ github.event.inputs.run-id || inputs.run-id }}"
        
        if [ -z "$RUN_ID" ]; then
          echo "‚ùå Workflow run ID is missing"
          exit 1
        fi
        
        echo "download-path=$DOWNLOAD_PATH" >> $GITHUB_OUTPUT
        echo "artifact-name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
        echo "run-id=$RUN_ID" >> $GITHUB_ENV
        echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_ENV
        echo "download_path=$DOWNLOAD_PATH" >> $GITHUB_ENV
        
        echo "‚úÖ Configuration set:"
        echo "  - Run ID: $RUN_ID"
        echo "  - Artifact: $ARTIFACT_NAME"
        echo "  - Download path: $DOWNLOAD_PATH"

    # - name: Print Pipeline Information
    #   run: |
    #     echo "üîç Pipeline Run Information:"
    #     echo "================================"
    #     echo "üìã Current Workflow Details:"
    #     echo "  - Workflow Name: ${{ github.workflow }}"
    #     echo "  - Workflow Run ID: ${{ github.run_id }}"
    #     echo "  - Workflow Run Number: ${{ github.run_number }}"
    #     echo "  - Workflow Run Attempt: ${{ github.run_attempt }}"
    #     echo "  - Event Name: ${{ github.event_name }}"
    #     echo "  - Event Type: ${{ github.event.action || 'N/A' }}"
    #     echo "  - Workflow File: ${{ github.workflow_ref }}"
    #     echo "  - Job Name: ${{ github.job }}"
    #     echo "  - Step Name: ${{ github.step }}"
    #     echo ""
    #     echo "üèóÔ∏è Repository Information:"
    #     echo "  - Repository: ${{ github.repository }}"
    #     echo "  - Repository Owner: ${{ github.repository_owner }}"
    #     echo "  - Ref: ${{ github.ref }}"
    #     echo "  - Ref Name: ${{ github.ref_name }}"
    #     echo "  - Ref Type: ${{ github.ref_type }}"
    #     echo "  - SHA: ${{ github.sha }}"
    #     echo "  - Head Ref: ${{ github.head_ref || 'N/A' }}"
    #     echo "  - Base Ref: ${{ github.base_ref || 'N/A' }}"
    #     echo "  - Repository URL: https://github.com/${{ github.repository }}"
    #     echo "  - Commit URL: https://github.com/${{ github.repository }}/commit/${{ github.sha }}"
    #     echo ""
    #     echo "üéØ Target Run Information:"
    #     echo "  - Target Run ID: ${{ env.RUN_ID }}"
    #     echo "  - Target Artifact: ${{ env.artifact_name }}"
    #     echo "  - Download Path: ${{ env.download_path }}"
    #     echo "  - Target Run URL: https://github.com/${{ github.repository }}/actions/runs/${{ env.RUN_ID }}"
    #     echo ""
    #     echo "üë§ Actor Information:"
    #     echo "  - Actor: ${{ github.actor }}"
    #     echo "  - Triggered By: ${{ github.triggering_actor || github.actor }}"
    #     echo "  - Actor ID: ${{ github.actor_id }}"
    #     echo ""
    #     echo "üïê Timing Information:"
    #     echo "  - Workflow Started: ${{ github.workflow_run.created_at || 'N/A' }}"
    #     echo "  - Current Time: $(date -u '+%Y-%m-%dT%H:%M:%SZ')"
    #     echo "  - Timezone: UTC"
    #     echo ""
    #     echo "üåê Environment Information:"
    #     echo "  - Runner OS: ${{ runner.os }}"
    #     echo "  - Runner Name: ${{ runner.name }}"
    #     echo "  - Runner Arch: ${{ runner.arch }}"
    #     echo "  - Runner Temp: ${{ runner.temp }}"
    #     echo "  - Runner Tool Cache: ${{ runner.tool_cache }}"
    #     echo "  - Runner Workspace: ${{ runner.workspace }}"
    #     echo ""
    #     echo "üìä Event Payload Information:"
    #     echo "  - Event Path: ${{ github.event_path }}"
    #     echo "  - Event Name: ${{ github.event_name }}"
    #     echo "  - Event Action: ${{ github.event.action || 'N/A' }}"
    #     echo ""
    #     echo "üîó URLs and Links:"
    #     echo "  - Workflow Run URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
    #     echo "  - Repository URL: https://github.com/${{ github.repository }}"
    #     echo "  - Commit URL: https://github.com/${{ github.repository }}/commit/${{ github.sha }}"
    #     echo "  - Branch URL: https://github.com/${{ github.repository }}/tree/${{ github.ref_name }}"
    #     echo "  - Target Run URL: https://github.com/${{ github.repository }}/actions/runs/${{ env.RUN_ID }}"
    #     echo ""
    #     echo "üìù Additional Context:"
    #     echo "  - Server URL: ${{ github.server_url }}"
    #     echo "  - API URL: ${{ github.api_url }}"
    #     echo "  - GraphQL URL: ${{ github.graphql_url }}"
    #     echo "  - GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN != '' && 'Present' || 'Not Present' }}"
    #     echo "================================"

    # - name: Fetch Target Run Details via API
    #   id: fetch-run-details
    #   run: |
    #     echo "üîç Fetching detailed information about target run ID: ${{ env.RUN_ID }}"
        
    #     # Use GitHub CLI to get detailed run information
    #     if command -v gh &> /dev/null; then
    #       echo "üìä Target Run Details (via GitHub CLI):"
    #       echo "========================================"
          
    #       # Get workflow run details
    #       gh api repos/${{ github.repository }}/actions/runs/${{ env.RUN_ID }} --jq '{
    #         id: .id,
    #         name: .name,
    #         status: .status,
    #         conclusion: .conclusion,
    #         created_at: .created_at,
    #         updated_at: .updated_at,
    #         run_started_at: .run_started_at,
    #         jobs_url: .jobs_url,
    #         logs_url: .logs_url,
    #         check_suite_url: .check_suite_url,
    #         artifacts_url: .artifacts_url,
    #         cancel_url: .cancel_url,
    #         rerun_url: .rerun_url,
    #         workflow_url: .workflow_url,
    #         head_branch: .head_branch,
    #         head_sha: .head_sha,
    #         path: .path,
    #         run_number: .run_number,
    #         run_attempt: .run_attempt,
    #         event: .event,
    #         display_title: .display_title,
    #         url: .url,
    #         html_url: .html_url,
    #         pull_requests: .pull_requests,
    #         created_at_formatted: (.created_at | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y-%m-%d %H:%M:%S UTC")),
    #         updated_at_formatted: (.updated_at | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y-%m-%d %H:%M:%S UTC"))
    #       }' | jq -r 'to_entries[] | "  - \(.key): \(.value)"'
          
    #       echo ""
    #       echo "üìã Workflow Details:"
    #       gh api repos/${{ github.repository }}/actions/runs/${{ env.RUN_ID }} --jq '.workflow_run' | jq -r 'to_entries[] | "  - \(.key): \(.value)"'
          
    #       echo ""
    #       echo "üë§ Actor Details:"
    #       gh api repos/${{ github.repository }}/actions/runs/${{ env.RUN_ID }} --jq '.actor' | jq -r 'to_entries[] | "  - \(.key): \(.value)"'
          
    #       echo ""
    #       echo "üèóÔ∏è Repository Details:"
    #       gh api repos/${{ github.repository }}/actions/runs/${{ env.RUN_ID }} --jq '.repository' | jq -r 'to_entries[] | "  - \(.key): \(.value)"'
          
    #       echo ""
    #       echo "üì¶ Available Artifacts:"
    #       gh api repos/${{ github.repository }}/actions/runs/${{ env.RUN_ID }}/artifacts --jq '.artifacts[] | "  - Name: \(.name), Size: \(.size_in_bytes) bytes, Created: \(.created_at)"'
          
    #     else
    #       echo "‚ö†Ô∏è  GitHub CLI not available, using curl to fetch basic information"
          
    #       # Fallback to curl if gh CLI is not available
    #       RUN_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
    #         "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ env.RUN_ID }}")
          
    #       echo "üìä Target Run Details (via API):"
    #       echo "========================================"
    #       echo "$RUN_INFO" | jq -r 'to_entries[] | "  - \(.key): \(.value)"' 2>/dev/null || echo "  - Error: Could not parse run information"
    #     fi
        
    #     echo "========================================"

    - name: Download Coverage Artifacts
      id: download
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.artifact_name }}
        path: ${{ env.download_path }}
        run-id: ${{ env.RUN_ID }}
        repository: ${{ github.repository }}
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Verify Coverage Artifact
      run: |
        DOWNLOAD_PATH="${{ env.download_path }}"
        echo "Verifying artifact at: $DOWNLOAD_PATH"
        
        if [ ! -d "$DOWNLOAD_PATH" ]; then
          echo "‚ùå Download path does not exist: $DOWNLOAD_PATH"
          exit 1
        fi
        
        echo "üìÅ Contents of download path:"
        ls -la "$DOWNLOAD_PATH" || echo "Directory is empty"
        
        # Check for common coverage artifact files
        if [ -f "$DOWNLOAD_PATH/lcov-report/index.html" ]; then
          echo "‚úÖ Found lcov-report/index.html"
        fi
        
        if [ -f "$DOWNLOAD_PATH/lcov.info" ]; then
          echo "‚úÖ Found lcov.info"
        fi
        
        if [ -f "$DOWNLOAD_PATH/coverage-final.json" ]; then
          echo "‚úÖ Found coverage-final.json"
        fi
        
        # If none of the expected files exist, check what we actually have
        if [ ! -f "$DOWNLOAD_PATH/lcov-report/index.html" ] && [ ! -f "$DOWNLOAD_PATH/lcov.info" ] && [ ! -f "$DOWNLOAD_PATH/coverage-final.json" ]; then
          echo "‚ö†Ô∏è  No standard coverage files found, but artifact was downloaded"
          echo "Files present:"
          find "$DOWNLOAD_PATH" -type f | head -10
        fi
        
        echo "‚úÖ Artifact verification completed"

    - name: Display Artifact Information
      run: |
        DOWNLOAD_PATH="${{ env.download_path }}"
        echo "üìä Artifact Download Summary:"
        echo "  - Artifact name: ${{ env.artifact_name }}"
        echo "  - Run ID: ${{ env.RUN_ID }}"
        echo "  - Download path: $DOWNLOAD_PATH"
        echo "  - Repository: ${{ github.repository }}"
        echo "  - Download status: ${{ steps.download.outcome }}"
        echo ""
        echo "üìÅ Downloaded files:"
        if [ -d "$DOWNLOAD_PATH" ]; then
          du -sh "$DOWNLOAD_PATH" 2>/dev/null || echo "Could not calculate size"
          find "$DOWNLOAD_PATH" -type f | wc -l | xargs echo "Total files:"
        else
          echo "Download path does not exist"
        fi
